<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Experiment>
<Experiment_Text_Page_01>Experiment 8: The Reaction Tester</Experiment_Text_Page_01>
<Experiment_Number_Page_01>8</Experiment_Number_Page_01>
<Experiment_Text_Page_02>Experiment 8: The Reaction Tester</Experiment_Text_Page_02>
<Experiment_Text_Page_03>Experiment 8: The Reaction Tester</Experiment_Text_Page_03>
<Experiment_Text_Page_04>Experiment 8: The Reaction Tester</Experiment_Text_Page_04>
<Part_1>
<Description_Title>The Reaction Tester</Description_Title>
</Part_1>
<Part_2>
<Description_Text>Computers are great at doing math and automating boring tasks, but everyone knows that their true purpose is to play games. Let’s create a game on the Digital Sandbox! But in order to control the game we need to add input.</Description_Text>
<Background_Information_Title>Background Information</Background_Information_Title>
<Background_Information_Text>Up to this point, our Digital Sandbox experience has been very one-sided. Output to tiny yellow LEDs. Output to larger white LEDs. Output to RGB LEDs. Change the fade value of the output. Output, output, output. Let’s flip the tables on the Sandbox, and send some input to the board!
Inputs are signals or values sent into a system. Some of the most common inputting components are buttons. Buttons on a keyboard are an input to your computer, because they send data into that system.
if statements are critical to assessing the status of an input, and taking an action based on that – if button A is pressed, then print an “a”. We can take the if statement a step further by adding an else condition, which allows us to control what happens if the if statement evaluates to false. So now we can say something like “if the egg floats, throw it away, otherwise (else) fry it and eat!”</Background_Information_Text>
</Part_2>
<Part_3>
<Code_Components_Title>Code Components</Code_Components_Title>
<Code_Components_Text>Our game will use both the switch (in the bottom left of the Sandbox) and the small button – components tied to pins D2 and D12, respectively. The sketch is pretty massive, so we’ll snap it together for you. Here’s what it looks like:
If/Else: This block works just like the if block, but it allows you to determine what happens if the conditional evaluates false in addition to true. Again, you need a conditional block (or set of blocks) that evaluate to either true or false in the Test snap. You also need to add two separate blocks of code to fill both the then and else snaps.
Equivalence test (==): To test if two values are equivalent, we use the == statement. That’s right, there are two equals signs. This is to differentiate from a single equals sign, which is used to set one value to another. The double equals is like asking, “are these two values equal?”</Code_Components_Text>
</Part_3>
<Program>program</Program>
<Setup>setup</Setup>
<Loop>loop</Loop>
<Set_Number_Variable>set number variable</Set_Number_Variable>
<Variable>variable</Variable>
<Value>value</Value>
<Variable_Name_01>led</Variable_Name_01>
<Variable_Name_02>speed</Variable_Name_02>
<Set_Digital_Pin>set digital pin</Set_Digital_Pin>
<Digital_Pin>digital pin#</Digital_Pin>
<If>if</If>
<If_else>if/else</If_else>
<Test>test</Test>
<Then>then</Then>
<Else>else</Else>
<Math_Operator_01>+</Math_Operator_01>
<Logical_Operator_01>&gt;</Logical_Operator_01>
<Logical_Operator_02>==</Logical_Operator_02>
<Set_Analog_Pin>set analog pin</Set_Analog_Pin>
<Sign>#</Sign>
<Pin_01>10</Pin_01>
<Number_01>4</Number_01>
<Number_02>100</Number_02>
<Number_03>2</Number_03>
<Number_04>50</Number_04>
<Number_05>150</Number_05>
<Number_06>12</Number_06>
<Number_07>1</Number_07>
<Number_08>8</Number_08>
<Digital_value_01>HIGH</Digital_value_01>
<Digital_value_02>LOW</Digital_value_02>
<Delay>delay milliseconds</Delay>
<Milliseconds_01>10</Milliseconds_01>
<Part_4>
<Do_This_Title>Do This</Do_This_Title>
<Do_This_Text>Arrange your blocks so they match the image above. There are two important if/else statements in this program, which each test the status of an input. The top if/else tests pin 2, which is connected to the switch. If the switch is set to 1 (e.g. HIGH), then we set a variable called speed to 50. If the switch is set to 0 (LOW), then speed becomes 150.
The second if/else tests pin 12, which is tied to the small button. When the button is pressed, then the input is set to 1 (HIGH), and it’s 0 when released. This means that, when the button is being pressed, the code in the then will execute. When the button is not being pressed, the else blocks will run.
Can you guess what will happen in each of the pin 12 test cases? Upload the sketch to your board to find out!
This is a very simple game. Pick a number between 4 and 8, and try to make the LED stop on that number by pressing the button. To switch between easy and hard mode, move the switch from 0 to 1. Can you make it stop in the middle on hard mode?</Do_This_Text>
<Further_Explorations_Title>Further Explorations</Further_Explorations_Title>
<Further_Explorations_Text>Trick your friend and swap which direction of the switch sets it to easy mode – make 0 hard and 1 easy.
Swap the function of the switch and the button. Make it so you have to press the button to set the difficulty, and flick the switch to stop the LEDs.</Further_Explorations_Text>
</Part_4>
</Experiment>