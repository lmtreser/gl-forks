<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Experiment>
<Experiment_Text_Page_01>Experiment 14: Opto-Theremin (Addon)</Experiment_Text_Page_01>
<Experiment_Number_Page_01>14</Experiment_Number_Page_01>
<Experiment_Text_Page_02>Experiment 14: Opto-Theremin (Addon)</Experiment_Text_Page_02>
<Experiment_Text_Page_03>Experiment 14: Opto-Theremin (Addon)</Experiment_Text_Page_03>
<Experiment_Text_Page_04>Experiment 14: Opto-Theremin (Addon)</Experiment_Text_Page_04>
<Part_1>
<Description_Title>Opto-Theremin (Addon)</Description_Title>
</Part_1>
<Part_2>
<Description_Text>In this experiment we’ll attach a speaker to the Sandbox, and turn it into a musical instrument! By using the light sensor to control our speaker’s pitch, we can create a light-controlled Theremin – a non-contact electronic musical instrument.</Description_Text>
<Background_Information_Title>Background Information</Background_Information_Title>
<Background_Information_Text>By precisely modulating a pin, the Digital Sandbox can create electronic waves which, when routed through a loudspeaker, can produce a musical tone. We can program the Sandbox to control two characteristics of musical tone: pitch and duration.
A tone’s pitch is what we perceive when we think of a note as being very high (screams, forks scratching plates, etc.) versus very low (like earth-rumbling bass). The pitch of a tone is very closely related to the frequency played through a speaker. If we toggle a pin from HIGH-to-LOW then LOW-to-HIGH 440 times per second, for example, it produces a 440 Hz (hertz) frequency – a “middle A” pitch. Humans can hear frequencies ranging from 20 (low-pitch, bass) to 20,000 Hz (high-pitch, “ow, my ears”).
We can also program the duration of a tone – the length of time a pitch is played. In our program we’ll use the delay function to set the duration. Playing a tone with the Sandbox is very easy. Just give it a pitch and it’ll start toggling the output pin for you. Much like analog output, you can set it and forget it; the tone won’t stop playing until you tell it to.</Background_Information_Text>
</Part_2>
<Part_3>
<Code_Components_Title>Code Components</Code_Components_Title>
<Code_Components_Text>This program introduces the Tone and No Tone block. Here’s the full layout:
Tone: This block takes two inputs: a pin number and a frequency. The pin number can be any digital pin, but in this case we’ll use the expansion connector on pin 3. Frequency can be anything from 31 Hz to the extent of your audible range.
A tone initiated by the Tone block will go on-and-on, until you call a No Tone block. No Tone simply halts a pin from playing a tone. Both of these blocks can be found under the Utilities bin.
Map: This handy function maps a value from one range to another. In the example above, we’re taking a value (the output from A3) between 0 and 60, and mapping that to a range from 440 to 880. So an analog reading of 0 becomes 440, and a reading of 60 becomes 880, anything in between is relative to those two ranges. The map function can be especially useful in mapping an analog input (0-1023) to an output (0-255).</Code_Components_Text>
</Part_3>
<Program>program</Program>
<Setup>setup</Setup>
<Loop>loop</Loop>
<If_else>if/else</If_else>
<Test>test</Test>
<Then>then</Then>
<Else>else</Else>
<Analog_Pin>analog pin #</Analog_Pin>
<Math_Operator_01>+</Math_Operator_01>
<Digital_Pin>digital pin #</Digital_Pin>
<Set_Digital_Pin>set digital pin</Set_Digital_Pin>
<Sign>#</Sign>
<Tone>tone</Tone>
<Tone_Pin>pin#</Tone_Pin>
<Tone_Frequency>frequency</Tone_Frequency>
<Map>map</Map>
<Map_Value>value</Map_Value>
<Map_From>from</Map_From>
<Map_To>to</Map_To>
<No_Tone>no tone pin#</No_Tone>
<Pin_01>2</Pin_01>
<Pin_02>9</Pin_02>
<Pin_03>10</Pin_03>
<Pin_04>11</Pin_04>
<Pin_05>3</Pin_05>
<Pin_06>1</Pin_06>
<Number_01>0</Number_01>
<Number_02>60</Number_02>
<Number_03>440</Number_03>
<Number_04>880</Number_04>
<Number_05>5</Number_05>
<Digital_value_01>HIGH</Digital_value_01>
<Digital_value_02>LOW</Digital_value_02>
<Delay>delay milliseconds</Delay>
<Milliseconds_01>1000</Milliseconds_01>
<Part_4>
<Do_This_Title>Do This</Do_This_Title>
<Do_This_Text>Arrange your blocks as show in the image above, and upload to the Sandbox! You’ll also need to connect the speaker to the expansion connector as shown in this image:
Image showing how speaker is connected
As fun as the opto-thermin may be, the sound is considered grating by some, so the code implements a simple ON/OFF function. Slide the switch over to the “1” position to turn the opto-theremin on.
Once the theremin is on, the speaker should start making noises. Try covering the light sensor, does the pitch change? We’ve turned the RGB LED white, so you can try to corral the light from that to control the light sensor.
You can adjust the duration of the tone by sliding the potentiometer. Slide the pot all the way to 0 to get a really fast, “zapper” sound, or slide to the right to create a soothing, slow song.</Do_This_Text>
<Further_Explorations_Title>Further Explorations</Further_Explorations_Title>
<Further_Explorations_Text>Try adding a “rest” function to your opto-theremin. Use the button to intermittently cut-off the sound output.
Instead of using the Sandbox as a musical instrument, can you program it to play a written piece of music? Using a series of tones and delays, try reproducing the chorus of your favorite song!
Give yourself a hearing test! What’s the highest frequency you can hear? Can you hear tones others can’t? Can your pet hear pitches that you can’t?</Further_Explorations_Text>
</Part_4>
</Experiment>