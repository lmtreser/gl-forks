<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Experiment>
<Experiment_Text_Page_01>Experiment 4: Dimming (the Easy Way)</Experiment_Text_Page_01>
<Experiment_Number_Page_01>4</Experiment_Number_Page_01>
<Experiment_Text_Page_02>Experiment 4: Dimming (the Easy Way)</Experiment_Text_Page_02>
<Experiment_Text_Page_03>Experiment 4: Dimming (the Easy Way)</Experiment_Text_Page_03>
<Experiment_Text_Page_04>Experiment 4: Dimming (the Easy Way)</Experiment_Text_Page_04>
<Part_1>
<Description_Title>Dimming (the Easy Way)</Description_Title>
</Part_1>
<Part_2>
<Description_Text>Manual PWM is hard, and it doesn’t leave room for anything else in the program. Why can’t we offload that chore to the Digital Sandbox’s microcontroller. It’s smart enough for that…right?</Description_Text>
<Background_Information_Title>Background Information</Background_Information_Title>
<Background_Information_Text>PWM is such a popular tool many microcontrollers implement special hardware so they can mindlessly toggle the pin while doing something else. We call this PWM-based output analog output.
Unlike digital outputs, which only have two possible values, analog outputs have a huge range of possible values. On the Sandbox we can analog-ly output 256 different values. If we set an analog output to 0, that’s like setting a pin LOW, and 255 is like setting a pin HIGH, but all of the values in between produce an output that’s neither HIGH or LOW – somewhere in between.
Analog output seems great – why wouldn’t you use it all the time? Unfortunately, not all pins have special, PWM powers. Only pins 3, 5, 6, 9, 10, and 11 are able to produce analog outputs.</Background_Information_Text>
</Part_2>
<Part_3>
<Code_Components_Title>Code Components</Code_Components_Title>
<Code_Components_Text>New block alert! While it may look similar, we’ll be using Set Analog Pin this time instead of its digital counterpart:
Set Analog Pin: This block looks a lot like the Set Digital Pin block. We still tell it which pin to control, but instead of a restrictive, digital, output option, we get to choose any number between 0 and 255 for the output. Find this block under the Pins bin.</Code_Components_Text>
</Part_3>
<Program>program</Program>
<Setup>setup</Setup>
<Loop>loop</Loop>
<Set_Analog_Pin>set analog pin</Set_Analog_Pin>
<Sign>#</Sign>
<Pin_01>5</Pin_01>
<Number_01>0</Number_01>
<Number_02>64</Number_02>
<Number_03>128</Number_03>
<Number_04>192</Number_04>
<Number_05>255</Number_05>
<Delay>delay milliseconds</Delay>
<Milliseconds_01>1000</Milliseconds_01>
<Part_4>
<Do_This_Title>Do This</Do_This_Title>
<Do_This_Text>Stack the blocks in the loop section. Order them so the analog values go from 0 at the top to 255 at the bottom. Then upload away!
The LED on pin 5 should cycle through 5 different levels of brightness (including fully on and fully off). Remember that setting the analog output to 0 turns the LED off, and 255 is like setting it to HIGH.
Try adding analog control of the pin 6 LED to the drawing. You can create the same effect from the last experiment, with just two lines of code (and you can execute other code while the LEDs remain in their dimmed state!).</Do_This_Text>
<Further_Explorations_Title>Further Explorations</Further_Explorations_Title>
<Further_Explorations_Text>What’s the dimmest value you can set the LED, and still see it on?
Why do you think there are 256 possible analog output values? That doesn’t seem like a very round number (hint: 28).THIS NEEDS TO BE CHANGED</Further_Explorations_Text>
</Part_4>
</Experiment>